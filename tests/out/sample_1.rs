//! Generated by sea-orm-dbml 0.1.0-beta.2

use sea_orm::entity::prelude::*;

pub mod users {
	use sea_orm::entity::prelude::*;

	#[derive(Clone, Debug, PartialEq, DeriveEntityModel)]
	#[sea_orm(table_name = "users", schema_name = "public")]
	pub struct Model {
		#[sea_orm(column_type = "Integer", primary_key, auto_increment = false)]
		pub id: i32,
		#[sea_orm(column_type = "Integer", default_value = 10)]
		pub age: i32,
		#[sea_orm(column_type = "String(None)")]
		pub username: String,
		#[sea_orm(column_type = "String(None)")]
		pub role: String,
		#[sea_orm(column_type = "DateTime")]
		pub created_at: DateTime,
		#[sea_orm(column_type = "Integer", nullable)]
		pub referral_id: Option<i32>,
	}

	#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
	pub enum Relation {
		#[sea_orm(belongs_to = "Entity", from = "Column::ReferralId", to = "Column::Id")]
		SelfReferencing,
		#[sea_orm(has_many = "super::posts::Entity")]
		Posts,
	}

	pub struct SelfReferencingLink {}

	impl Linked for SelfReferencingLink {
		type FromEntity = Entity;
		type ToEntity = Entity;

		fn link(&self) -> Vec<RelationDef> {
			vec![Relation::SelfReferencing.def()]
		}
	}

	impl Related<super::posts::Entity> for Entity {
		fn to() -> RelationDef {
			Relation::Posts.def()
		}
	}

	impl ActiveModelBehavior for ActiveModel {}
}

pub mod posts {
	use sea_orm::entity::prelude::*;

	#[derive(Clone, Debug, PartialEq, DeriveEntityModel)]
	#[sea_orm(table_name = "posts", schema_name = "public")]
	pub struct Model {
		#[sea_orm(column_type = "Integer", primary_key, auto_increment = false)]
		pub id: i32,
		#[sea_orm(column_type = "String(None)")]
		pub title: String,
		#[sea_orm(column_type = "Text")]
		pub body: String,
		#[sea_orm(column_type = "Integer")]
		pub user_id: i32,
		pub status: super::PostStatus,
		#[sea_orm(column_type = "DateTime")]
		pub created_at: DateTime,
	}

	#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
	pub enum Relation {
		#[sea_orm(belongs_to = "super::users::Entity", from = "Column::UserId", to = "super::users::Column::Id")]
		Users,
	}

	impl Related<super::users::Entity> for Entity {
		fn to() -> RelationDef {
			Relation::Users.def()
		}
	}

	impl ActiveModelBehavior for ActiveModel {}
}

pub mod orders {
	use sea_orm::entity::prelude::*;

	#[derive(Clone, Debug, PartialEq, DeriveEntityModel)]
	#[sea_orm(table_name = "orders", schema_name = "public")]
	pub struct Model {
		#[sea_orm(column_type = "Integer", primary_key, auto_increment = false)]
		pub id: i32,
		#[sea_orm(column_type = "String(None)")]
		pub status: String,
	}

	#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
	pub enum Relation {}

	impl ActiveModelBehavior for ActiveModel {}
}

#[derive(Clone, Debug, PartialEq, EnumIter, DeriveActiveEnum)]
#[sea_orm(rs_type = "String", db_type = "Enum", enum_name = "post_status", schema_name = "public")]
pub enum PostStatus {
	#[sea_orm(string_value = "draft")]
	Draft,
	#[sea_orm(string_value = "published")]
	Published,
	#[sea_orm(string_value = "private")]
	Private,
}
